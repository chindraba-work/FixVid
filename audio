#!/bin/bash

########################################################################
#                                                                      #
#  audio: functions for extracting, converting and creating audio      #
#         streams from source files for inclusion in the finished      #
#         version of the video files                                   #
#                                                                      #
#  This file is part of FixVid, a system to semi-automatically modify  #
#  and re-encode video files to create an acceptable version for a     #
#  standardized collection or library of videos.                       #
#                                                                      #
#  Copyright Â© 2018, 2019  Chindraba (Ronald Lamoreaux)                #
#                          <fixvid@chindraba.work>                     #
#  - All Rights Reserved                                               #
#                                                                      #
#  FixVid is free software; you can redistribute it and/or             #
#  modify it under the terms of the GNU General Public License,        #
#  version 2 only, as published by the Free Software Foundation.       #
#                                                                      #
#  FixVid is distributed in the hope that it will be useful,           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of      #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       #
#  GNU General Public License for more details.                        #
#                                                                      #
#  You should have received a copy of the GNU General Public License   #
#  along with this program; if not, write to the                       #
#        Free Software Foundation, Inc.                                #
#        51 Franklin Street                                            #
#        Fifth Floor                                                   #
#        Boston, MA  02110-1301                                        #
#        USA.                                                          #
#                                                                      #
########################################################################

function load_audio_settings {
  # To include either the original or the enhanced streams, there must
  # be at least one layout included. DTS, other surround sound, or
  # stereo. Stereo can be made from any source, so that is default
  check  $current_include_original || \
  check $current_include_enhanced && \
  ! check  $current_include_dts && \
  ! check  $current_include_channels && \
    declare -g current_include_stereo=1;

  # To include stereo or non-DTS surround sound, there must be at
  # at least one codec included as well. Defaults to AC3
  check $current_include_stereo || \
  check $current_include_channels && \
  ! check $current_include_aac && \
    declare -g current_include_ac3=1;

  # To include any version of the sound, there must be some version of
  # the audio volume included, either original or enhanced
  check $current_include_dts || \
  check $current_include_stereo || \
  check $current_include_channels && \
  check $current_include_original || \
    declare -g current_include_enhanced=1;

  # To include any format of audio it must be made first
  for audio_format in $audio_formats; do
    include_var="current_include_${audio_format}";
    check ${!include_var} && declare -g current_make_${audio_format}=1;
  done

  # To make a DTS stream, we need a copy of the channel stream first
  check $current_make_dts && declare -g current_make_channels=1;

  # To make stereo or non-DTS surround sound, there must be at
  # at least one codec made as well. Defaults to AC3
  check $current_make_stereo || \
  check $current_make_channels && \
  ! check $current_make_aac && \
    declare -g current_make_ac3=1;

  # To include any volume version of audio it must be made first
  for audio_volume in $audio_volumes; do
    include_var="current_include_${audio_volume}";
    check ${!include_var} && declare -g current_make_${audio_volume}=1;
  done

  # Every codec that is included has to be made first
  for codec in $full_audio_codec_list channels custom dts stereo enhanced original; do
    var="current_include_${codec}";
    check ${!var} && declare -g current_make_${codec}=1;
  done

  # Check for, and set, the dynamic filter settings for the channels
  declare -g current_dyna_stereo="${current_dyna_stereo:-$dyna_stereo}";
  declare -g current_dyna_origin="${current_dyna_origin:-$dyna_origin}";
  declare -g current_dyna_center="${current_dyna_center:-$dyna_center}";
  declare -g current_dyna_extras="${current_dyna_extras:-$dyna_extras}";
  declare -g current_dyna_others="${current_dyna_others:-$dyna_others}";

  # Check for, and set default surround sound channel mapping values
  case $current_channels in
    2 ) # Stereo is not surround sound
      ;;
    7.1 )
      current_mapping="${current_mapping:-$audio_mapping_71}"
      current_layout="${current_layout:-$audio_layout_71}"
      current_mixing="${current_mixing:-$audio_mixing_71}"
      ;;
    5.1 )
      current_mapping="${current_mapping:-$audio_mapping_51}"
      current_layout="${current_layout:-$audiot_layout_51}"
      current_mixing="${current_mixing:-$audio_mixing_51}"
      ;;
    '5.1(side)' )
      current_mapping="${current_mapping:-$audio_mapping_51_side}"
      current_layout="${current_layout:-$audio_layout_51_side}"
      current_mixing="${current_mixing:-$audio_mixing_51_side}"
      ;;
    * )
      ;;
  esac

  # Check for, and set, the settings for audio codecs used
  aac_encode="${aac_codec_params:-$aac_params}";
  aac_stereo_bitrate="${aac_stereo_bitrate:-$aac_stereo_bits}";
  aac_channel_bitrate="${aac_channel_bitrate:-$aac_channel_bits}";
  ac3_encode="${ac3_codec_params:-$ac3_params}";
  ac3_stereo_bitrate="${ac3_stereo_bitrate:-$ac3_stereo_bits}";
  ac3_channel_bitrate="${ac3_channel_bitrate:-$ac3_channel_bits}";
  wav_encode="${wav_codec_params:-$wav_params}";
  wav_mono_bitrate="${wav_mono_bitrate:-$wav_mono_bits}";
  return 0;
}

function audio_copy_surround {
  check $current_make_original && check $current_make_channels || \
    check $force_run || return 0;
  ac3_bitrate="$ac3_channel_bitrate";
  aac_bitrate="$aac_channel_bitrate";
  local codec;
  for codec in $audio_codec_list; do
    local check_var="current_make_$codec";
    check ${!check_var} && check $current_make_original && \
    [[ ! -s "${current_base}.$codec" ]] || \
    check $force_run && {
      build_ffmpeg_audio_encode "$codec" '[Surround Sound]';
      shared_launch "${current_title} ${codec^^}" \
        "${current_label}_channel_copy_$codec" bash -c "$ffmpeg_command";
      reset_ffmpeg_data;
    }
  done
  return 0;
}

function audio_dts {
  [[ 2 = $current_channels ]] && return 0;
  check $current_make_dts || check $force_run || return 0;
  launch audio_remix $current_target;
  audio_dts_stream 'original' '[DTS]';
  audio_dts_stream 'enhanced' '[DTS Enhanced]' 'norm';
  return 0;
}

function audio_dts_stream {
  local check_var="current_make_$1";
  local active_codec;
  local active_ext;
  local active_level;
  local active_sourcel
  current_title="${saved_title}${2:+ $2}";
  current_base="${saved_base}${3:+-$3}";
  local pid_var="${current_label}_channel_";
  [[ $3 ]] && pid_var+='norm' || pid_var+='copy';
  [[ ! -s "${current_base}.dts" ]] &&  check ${!check_var} || \
  check $force_run && {
    check $current_make_ac3 && \
      active_ext="ac3" || \
      active_ext="aac";
    pid_var+="_${active_ext}_pid";
    active_source="${current_base}.${active_ext}";
    output_pad="0:0";
    build_ffmpeg_input "$active_source";
    build_ffmpeg_audio_encode 'dts' '[DTS]'
    [[ ${!pid_var} ]] && wait ${!pid_var} 2&>/dev/null;
    shared_launch "${current_title}" \
      "${current_label}_dts" bash -c "$ffmpeg_command";
    reset_ffmpeg_data;
    return 0;
  }
}

function audio_channels {
  [[ 2 = $current_channels ]] && return 0;
  check $current_make_enhanced && check $current_make_channels || \
    check $force_run || return 0;
  local file_missing=0;
  local channel;
  for channel in $current_layout; do
    [[ -s "${current_base}-channel-${channel,,}.wav" ]] || \
      file_missing=1;
  done
  check $file_missing || check $force_run || return 0;
  rm -f "${current_base}-channel-adj-*wav";
  unset stream_list;
  unset output_pad;
  local  pad_list=;
  for channel in $current_layout; do
    output_pad="[${channel^^}]";
    pad_list+="${output_pad}";
    current_title="${saved_title} Audio ${output_pad} Channel";
    build_stream_meta;
    build_file_meta;
    build_ffmpeg_output 'wav' "$audio_only" "channel-${channel,,}";
    codec_part="-c:a $wav_encode -b:a $wav_mono_bitrate";
    build_ffmpeg_stream;
    stream_list+=" $ffmpeg_stream";
    unset ffmpeg_stream;
    current_title="${saved_title}";
  done
  build_ffmpeg_preamble "${current_base}-Channels.wav";
  filter_graph="-filter_complex '[0:$current_stream] \
    channelsplit=channel_layout=$current_channels $pad_list'";
  build_ffmpeg_command;
  shared_launch "${current_title} Channels" \
    "${current_label}_split" bash -c "$ffmpeg_command";
  reset_ffmpeg_data;
  return 0;
}

function audio_stereo {
  check $current_make_stereo || check $force_run || return 0;
  local  output_pad_enhanced;
  local  output_pad_original;
  local  filter_enhanced;
  local  filter_original;
  [[ 2 = "$current_channels" ]] && {
    current_base+='-stereo';
    filter_enhanced="-af '${current_dyna_stereo}'";
    filter_original=;
  } || {
    current_base+='-downmix';
    filter_enhanced="-filter_complex '[0:${current_stream}] ${current_mixing} [STEREO];[STEREO] ${current_dyna_stereo} [NORM]'";
    output_pad_enhanced="[NORM]";
    filter_original="-filter_complex '[0:${current_stream}] ${current_mixing} [STEREO]'";
    output_pad_original="[STEREO]";
  }
  local audio_volume;
  local codec_name;
  for audio_volume in $audio_volumes; do
    for codec_name in $audio_codec_list; do
      audio_stereo_stream "$codec_name" "$audio_volume";
    done
  done
  unset output_pad_enhanced;
  unset output_pad_original;
  unset filter_enhanced;
  unset filter_original;
  return 0;
}

function audio_stereo_stream {
  local active_codec="${1:-ac3}";
  local active_level="${2:-original}";
  local codec_check="current_make_$active_codec"
  local level_check="current_make_${active_level}";
  local filter_var="filter_${active_level}";
  filter_graph="${!filter_var}"
  local pad_var="output_pad_${active_level}";
  output_pad="${!pad_var}";
  bitrate_var="${active_codec}_stereo_bitrate";
  declare -g ${active_codec}_bitrate="${!bitrate_var}";
  local base_suffix;
  local title_suffix;
  [[ 'enhanced' == $active_level ]] && {
    base_suffix='norm';
    title_suffix="[Enhanced Stereo]";
  } || {
    base_suffix=;
    title_suffix="[Stereo]";
  }
  check ${!codec_check} && check ${!level_check} && \
  [[ ! -s "${current_base}${base_suffix:+-$base_suffix}.${active_codec}" ]] || \
  check $force_run && {
    build_ffmpeg_audio_encode "$active_codec" "$title_suffix" "$base_suffix";
    shared_launch "${current_title} $title_suffix ${active_codec^^}" \
      "${current_label}_stereo${base_suffix:+_$base_suffix}_${active_codec}" bash -c "$ffmpeg_command";
    reset_ffmpeg_data;
  }
  return 0;
}

function audio_normalize {
  [[ 2 = $current_channels ]] && return 0;
  check $current_make_enhanced || check $force_run || return 0;
  check $current_make_channels || check $current_make_dts || \
  check $force_run || \
    return 0;
  local file_missing=0;
  local channel;
  for channel in $current_layout; do
    [[ -s "${current_base}-channel-adj-${channel,,}.wav" ]] || \
      file_missing=1;
  done
  check $file_missing || check $force_run || return 0;
  local codec_name
  for codec_name in $full_audio_codec_list $current_ext; do
    rm -f "${current_base}-norm.$codec_name";
  done
  local source_missing=0;
  for channel in $current_layout; do
    [[ -s "${current_base}-channel-${channel,,}.wav" ]] || \
      source_missing=1;
  done
  check $source_missing || check $force_run && \
    launch audio_channels $current_target;
  local pid_var="${current_label}_split_pid";
  [[ ${!pid_var} ]] && wait ${!pid_var} 2&>/dev/null;
  unset current_stream;
  for channel in $current_layout; do
    local outfile;
    local infile;
    outfile="${current_base}-channel-adj-${channel,,}.wav";
    [[ ! -s "$outfile" ]] || check $force_run && {
      infile="${current_base}-channel-${channel,,}.wav";
      build_ffmpeg_preamble "$outfile";
      build_ffmpeg_input "$infile";
      case ${channel^^} in
        'FR'|'FL' )
          filter_graph="-af $current_dyna_origin"
          ;;
        'FC' )
          filter_graph="-af $current_dyna_center"
          ;;
        * )
          filter_graph="-af $current_dyna_extras"
          ;;
      esac
      current_title="${saved_title} Normalized ${channel^^} Channel";
      codec_part="-c:a $wav_encode -b:a $wav_mono_bitrate";
      build_ffmpeg_output 'wav' "$audio_only" "channel-adj-${channel,,}";
      build_ffmpeg_command;
      current_title="${saved_title}";
      shared_launch "${current_title} Normalize [${channel^^}]" \
        "${current_label}_${channel,,}_adj" bash -c "$ffmpeg_command";
      reset_ffmpeg_data;
    }
  done
  return 0;
}

function audio_remix {
  [[ 2 = $current_channels ]] && return 0;
  launch audio_copy_surround $current_target;
  check $current_make_enhanced || check $force_run || return 0;
  check $current_make_channels || check $current_make_dts || \
  check $force_run || \
    return 0;
  local source_missing=0;
  local channel;
  for channel in $current_layout; do
    [[ -s "${current_base}-channel-adj-${channel,,}.wav" ]] || \
      source_missing=1;
  done
  check $source_missing || check $force_run && \
    launch audio_normalize $current_target;
  local channel_count=0;
  unset input_list;
  declare pid_list;
  for channel in $current_layout; do
    local input_pad="[$channel_count:0]";
    pad_list+="$input_pad";
    build_ffmpeg_input "${current_base}-channel-adj-${channel,,}.wav";
    input_list+=" $ffmpeg_input";
    local pid_var="${current_label}_${channel,,}_adj_pid";
    [[ ${!pid_var} ]] && pid_list+=" ${!pid_var}";
    (( channel_count++ ));
  done
  local merge_filter="-filter_complex '${pad_list} \
    amerge=inputs=${channel_count} [CHANNELS]; \
    [CHANNELS] ${current_mapping} [AOUT]'";
  ac3_bitrate="$ac3_channel_bitrate";
  aac_bitrate="$aac_channel_bitrate";
  local pid;
  for pid in $pid_list; do
    wait $pid 2&>/dev/null;
  done
  local codec;
  for codec in ${audio_codec_list}; do
    local check_var="current_make_$codec"
    check ${!check_var} && [[ ! -s "${current_base}-norm.$codec" ]] || \
    check $force_run && {
      build_ffmpeg_audio_encode "$codec" \
        '[Enhanced Surround Sound]' 'norm' "$merge_filter" "[AOUT]";
      shared_launch "${current_title} Norm ${codec^^}" \
        "${current_label}_channel_norm_$codec" bash -c "$ffmpeg_command";
      unset ffmpeg_output;
    }
  done
  reset_ffmpeg_data;
  return 0;
}

audio_codec_list='aac ac3';
full_audio_codec_list="${audio_codec_list} dts";
audio_formats='stereo channels dts';
audio_volumes='original enhanced';

audio_key='stream';
audio_fields="source stream label title lang channels layout \
mapping mixing dyna_stereo dyna_origin dyna_center dyna_extras \
dyna_others filter complex codec ext include_enhanced include_original \
include_stereo include_channels include_dts include_ac3 include_aac \
include_custom make_enhanced make_original make_stereo make_channels \
make_dts make_ac3 make_aac make_custom save_enhanced save_original \
save_stereo save_channels save_dts save_ac3 save_aac save_custom";

# ffmpeg for ignoring all but the chosen type of stream
audio_only="-vn -sn -dn";

#  Default values for encoding the audio streams.
#+ The fixvid.conf file may override these settings
aac_stereo_bits='128k';
aac_channel_bits='420k';
ac3_stereo_bits='192k';
ac3_channel_bits='640k';
wav_mono_bits='384k';

aac_params='libfdk_aac -profile:a aac_he'
ac3_params='ac3';
wav_params='pcm_s16le';
dts_params="dts -strict -2";
aac_encode="${aac_codec_params:-$aac_params}";
ac3_encode="${ac3_codec_params:-$ac3_params}";
wav_encode="${wav_codec_params:-$wav_params}";
dts_encode="${dts_codec_parama:-$dts_params}";

#  Default values for processing surround sound streams.
#+ The fixvid.conf file may override these settings
# Used on stereo streams
dyna_stereo='dynaudnorm=f=66:g=17:p=0.95:m=50:s=20';
# Used on the 'Center' channel of surround sound streams
dyna_center='dynaudnorm=f=100:g=13:p=0.97:m=15:s=20';
# Used on the main Left and Right channels
dyna_origin='dynaudnorm=f=250:g=23:p=0.89:m=15:s=20';
# Used for the remaining channels in surround sound streams
dyna_extras='dynaudnorm=f=500:g=31:p=0.80:m=15:s=20';
# Not used but always available. For future use in new audio commands
dyna_others='dynaudnorm=f=300:g=23:p=0.95:m=30:s=20';

usage['    all_sound']='Create all versions of all the audio stream(s)';
function all_sound_help {
  cat <<HELP_ALL_SOUND

    all_sound [- [<force>]]
        A one-shot command which combines the remix, stereo and dts
        commands into a single command and processes all streams.

HELP_ALL_SOUND
}

usage['[a] audio']='[<target_num>] Create all versions of the audio stream(s)';
function audio_help {
  cat <<HELP_AUDIO

    audio [<target_num> [<force>]]
    a [<target_num> [<force>]]
        A one-shot command which combines the remix, stereo and dts
        commands into a single command. Multiple streams can be created.
        For more information on multiple streams, see: $1 help target_num.

HELP_AUDIO
}

usage['[d] dts']='[<target_num>] Create DTS encoded audio stream(s)';
function dts_help {
  cat <<HELP_DTS

    dts [<target_num> [<force>]]
        Create DTS formatted surround sound files from the previously
        created AC3 files from the remix command. Will call the remix
        command if the needed input files are missing. Multiple streams
        can be created. For more information on multiple streams, see:
        $1 help target_num.

HELP_DTS
}

usage['[c] channels']='[<target_num>] Low-level command to extract surround sound channels';
function channels_help {
  cat <<HELP_EXPLODE

    channels [<target_num> [<force>]]
        Create a separate WAV file for each channel of a surround sound
        stream. Multiple streams can be created. For more information on
        multiple streams, see: $1 help target_num.

HELP_EXPLODE
}

usage['[n] normalize']='[<target_num>] Low-level command to normalize surround sound channels';
function normalize_help {
  cat <<HELP_NORMALIZE

    normalize [<target_num> [<force>]]
        Create normalized versions of each of the separate channels
        made by the explode command. Will call the explode command if
        any of the original files are missing. Multiple streams can be
        created. For more information on multiple streams, see:
        $1 help target_num.

HELP_NORMALIZE
}

usage['[m] remix']='[<target_num>] Create surround sound audio stream(s)';
function remix_help {
  cat <<HELP_REMIX

    remix [<target_num> [<force>]]
        Extract surround sound streams and save an un-modified version
        in an external file. Split the channels, normalize each one, and
        recombine the individual channel files into a single surround
        sound stream. Calls the normalize command to create any of the
        missing source files. Multiple streams can be created. For more
        information on multiple streams, see: $1 help target_num.

HELP_REMIX
}

usage['[s] stereo']='[<target_num>] Create stereo audio stream(s)';
function stereo_help {
  cat <<HELP_STEREO

    stereo [<target_num> [<force>]]
        Extract the stereo sound track from the file and stream
        identified in the fixvid.conf file as the stereo source. Applies
        the enhancements to the stereo sound track and creates an AAC
        and/or an AC3 file of the original and/or the enhanced tracks.
        Multiple streams can be created. For more information on
        multiple streams, see: $1 help target_num.

HELP_STEREO
}

function dynaudnorm_help {
  cat <<DYNAUDNORM

dynaudnorm is the dynamic audio normalization filter in FFMPEG. It has
the following parameters, among others, available

   f:  frame-size(ms)[10-8000,500]: size of each frame for gain
       calculations
   g:  Gaussian filter window size(frames)[3-301(odd),31]: the "window"
       over which gain is normalized
   p:  peak target(%of FS)[.01-.99,.95]: the target max volume of
       normalization.
   m:  max-gain[1-100,10]: globally applied limit to gain applied to any
       segment.
   r:  RMS[0.0(disabled)-1.0]: Use RMS calculations, rather than "peak"
       for gain factors
   s:  compression factor[0.0(disabled)-30.0]: lower is more dynamic
       compression, 3 seems a hard no-distortion floor.

   The parameters are given in a colon ':' separated list of key=value
   pairs. A global maximum gain of 25 with a target peak of 85% of full
   scale using a window of 43 frames of 750ms each would be given as:
       'dynaudnorm=m=25:p=.85:g=43:f=750'

   Full documentation for dynaudnorm can be found on the FFMPEG website:
        https://ffmpeg.org/ffmpeg-filters.html#dynaudnorm

DYNAUDNORM
}

function audio_config {
tee -a 'fixvid.conf' << 'EOAUDIO' >/dev/null

########################################################################
#                                                                      #
#                       Audio component settings                       #
#                                                                      #
########################################################################
#  File name and index that has the stream of the audio source
#= audio_source_1='movie';
audio_stream_1=1;

#  The label to use on extracted files for this audio source
audio_label_1='sound';

#  The title, internal to the Matroska containter, to apply
audio_title_1='';

#  The language this audio stream is in, if different than the video
audio_lang_1='eng';

#  The channels in this stream. I.e. 5.1, 7.1, '5.1(side)', or 2
audio_channels_1='5.1(side)';

#  If the normal layout and channel mapping for the audio channel above
#+    then these allow for creating a unique setup.
#= audio_layout_1='fl fr fc lf sl sr';
#= audio_mapping_1='channelmap=0-FL|1-FR|2-FC|3-LFE|4-SL|5-SR:5.1(side)';

#  How to mix the channel values to create a stereo stream from original
#+ surround sound stream
#= audio_mixing_1='pan=stereo|FL < 1.7*FC + 0.5*FL + 0.6*SL|FR < 1.7*FC + 0.5*FR + 0.6*SR';

#  The dynaudnorm value to apply to the different channels when remixing
#+     the surround sound or enhancing the stereo stream. Not needed if
#+     the general version applies to this stream
#= audio_dyna_stereo_1='';
#= audio_dyna_center_1='';
#= audio_dyna_origin_1='';
#= audio_dyna_extras_1='';
#= audio_dyna_others_1='';

#  Include the normalized or original volume versions of created streams
#+ in the final product. Either of both can be included, if nothing is
#+ selected, the normalized versions will be included by default. Both
#+ are possible.
#= audio_include_enhanced_1=1;
#= audio_include_original_1=1;

#  Select the versions of the audio to include in the final product. By
#+ default the stereo version is selected. Multiple selections are valid
#= audio_include_stereo_1=1;
#= audio_include_channels_1=1;
#= audio_include_dts_1=1;

#  Select the codec to use for included streams. By default AC3 is used.
#+ More than one is allowed
#= audio_include_ac3_1=1;
#= audio_include_aac_1=1;
#= audio_include_custom_1=1;

#  Which versions of audio streams to build, even when not included in
#+ the final product.
#= audio_make_enhanced_1=1;
#= audio_make_original_1=1;
#= audio_make_stereo_1=1;
#= audio_make_channels_1=1;
#= audio_make_dts_1=1;
#= audio_make_ac3_1=1;
#= audio_make_aac_1=1;
#= audio_make_custom_1=1;

#  Which versions of audio streams to save during the finalization
#+ the final product.
#= audio_save_enhanced_1=1;
#= audio_save_original_1=1;
#= audio_save_stereo_1=1;
#= audio_save_channels_1=1;
#= audio_save_dts_1=1;
#= audio_save_ac3_1=1;
#= audio_save_aac_1=1;
#= audio_save_custom_1=1;

# ########   CUSTOM CODEC USE
#  The information needed to build some custom codec stream, if needed.
#+ The system will only handle one custom codec.
#+ The complete ffmpeg codec spec with needed options.
#+ Everything after '-c:a'
#= audio_codec_1='';
#
#  The filtering used in processing the sound. Can either be a simple
#+ filter, -af ..., or a complex filter, -filter_complex '....' The
#+ presence of anything in the audio_complex_# setting will cause the
#+ simple filter to be ignored. In either case, the dynaudnorm filter
#+ is appended, as needed, to the filter.

#  If needed the ffmpeg portion after the '-af'
#= audio_filter_1='';

#  When used, the complex filter graph MUST start with an input pad of
#+ [AIN] and end with an output pad of [AOUT]
#= audio_complex_1=''

#  The extension to apply to file names with this codec.
#= audio_ext_1='';
# ########

#  A second, third, etc. group of settings can be used by repeating the
#+ set of variables above, replacing the digit "1" with "2", and so on.
#+ The program will look for each, in sequence, and stop on the first
#+ one not found: group 3 will be ignored unless there is a group 2,
#+ etc. The audio_stream_# setting is the key for whether or not the
#+ group of settings will be applied. The audio_channels_# needs to be
#+ set and the audio_label_# should be filled.

#= audio_source_2='movie';
#= audio_stream_2=1;
#= audio_label_2='';
#= audio_title_2='';
#= audio_lang_2='eng';
#= audio_channels_2=2;
#= audio_layout_2='';
#= audio_mapping_2='';
#= audio_mixing_2='';
#= audio_dyna_stereo_2='';
#= audio_dyna_center_2='';
#= audio_dyna_origin_2='';
#= audio_dyna_extras_2='';
#= audio_dyna_others_2='';
#= audio_include_enhanced_2=1;
#= audio_include_original_2=1;
#= audio_include_stereo_2=1;
#= audio_include_channels_2=1;
#= audio_include_dts_2=1;
#= audio_include_ac3_2=1;
#= audio_include_aac_2=1;
#= audio_include_custom_2=1;
#= audio_make_original_2=1;
#= audio_make_enhanced_2=1;
#= audio_make_stereo_1=1;
#= audio_make_channels_2=1;
#= audio_make_dts_2=1;
#= audio_make_ac3_2=1;
#= audio_make_aac_2=1;
#= audio_make_custom_2=1;
#= audio_codec_2='';
#= audio_filter_2='';
#= audio_complex_2=''
#= audio_ext_2='';


#  SETTINGS for encoding the different audio codecs.
######################################
#  The default values shown will be used if left commented or blank

#= aac_stereo_bitrate='128k';
#= aac_channel_bitrate='420k';
#= ac3_stereo_bitrate='192k';
#= ac3_channel_bitrate='640k';
#= wav_mono_bitrate='384k';

#= aac_codec_params='ac3 -b:a 192k';
#= ac3_codec_params='libfdk_aac -profile:a aac_he -b:a 128k';
#= wav_codec_params='pcm_s16le -b:a 384k';

# SETTINGS for standard surround sound
######################################

### Use for 7.1 surround sound
audio_layout_71='fl fr fc lf bl br sl sr';
audio_mapping_71='channelmap=0-FL|1-FR|2-FC|3-LFE|4-BL|5-BR|6-SL|7-SR:7.1';
audio_mixing_71='pan=stereo|FL < 1.7*FC + 0.7*FL + 0.5*BL + 0.6*SL|FR < 1.7*FC + 0.7*FR + 0.5*BR + 0.6*SR';

### Use for 5.1 surround sound
audio_layout_51='fl fr fc lf bl br';
audio_mapping_51='channelmap=0-FL|1-FR|2-FC|3-LFE|4-BL|5-BR:5.1';
audio_mixing_51='pan=stereo|FL < 1.7*FC + 0.6*FL + 0.5*BL|FR < 1.7*FC + 0.6*FR + 0.5*BR';

### Use for 5.1(side) surround sound
audio_layout_51_side='fl fr fc lf sl sr';
audio_mapping_51_side='channelmap=0-FL|1-FR|2-FC|3-LFE|4-SL|5-SR:5.1(side)';
audio_mixing_51_side='pan=stereo|FL < 1.7*FC + 0.5*FL + 0.6*SL|FR < 1.7*FC + 0.5*FR + 0.6*SR';

#  SETTINGS for dynaudnorm filter
#################################
#+ Defualt values given, uncomment and change as needed
#+
#+ Used on stereo streams
#= dyna_stereo='dynaudnorm=f=66:g=17:p=0.95:m=50:s=20';
#+
#+ Used on the 'Center' channel of surround sound streams
#= dyna_center='dynaudnorm=f=100:g=13:p=0.97:m=15:s=20';
#+
#+ Used on the main Left and Right channels
#= dyna_origin='dynaudnorm=f=250:g=23:p=0.89:m=15:s=20';
#+
#+ Used for the remaining channels in surround sound streams
#= dyna_extras='dynaudnorm=f=500:g=31:p=0.80:m=15:s=20';
#+
#+ Not used but always available. For future use in new audio commands
#= dyna_others='dynaudnorm=f=300:g=23:p=0.95:m=30:s=20';

EOAUDIO
}
