########################################################################
#                                                                      #
#  helpers: functions and settings common to multiple commands or      #
#           used by the system itself rather than the processing       #
#                                                                      #
#  This file is part of FixVid, a system to semi-automatically modify  #
#  and re-encode video files to create an acceptable version for a     #
#  standardized collection or library of videos.                       #
#                                                                      #
#  Copyright Â© 2018, 2019  Chindraba (Ronald Lamoreaux)                #
#                          <fixvid@chindraba.work>                     #
#  - All Rights Reserved                                               #
#                                                                      #
#  FixVid is free software; you can redistribute it and/or             #
#  modify it under the terms of the GNU General Public License,        #
#  version 2 only, as published by the Free Software Foundation.       #
#                                                                      #
#  FixVid is distributed in the hope that it will be useful,           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of      #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       #
#  GNU General Public License for more details.                        #
#                                                                      #
#  You should have received a copy of the GNU General Public License   #
#  along with this program; if not, write to the                       #
#        Free Software Foundation, Inc.                                #
#        51 Franklin Street                                            #
#        Fifth Floor                                                   #
#        Boston, MA  02110-1301                                        #
#        USA.                                                          #
#                                                                      #
########################################################################

stack_num=0;

source "$fixvid_dir/audio";
source "$fixvid_dir/help";
source "$fixvid_dir/titles";
source "$fixvid_dir/video";

control_fields="base limit list prefix target all continue process";
scan_extensions='mp4 mkv avi aac ac3 wav mp3';
ffmpeg_variables="ffmpeg_command ffmpeg_preamble ffmpeg_input \
  input_list meta_filter filter_graph output_pad codec_part \
  stream_meta ffmpeg_stream stream_list file_meta ffmpeg_output";

# Create some text shortcuts and functions to use later.
#

# ffmpeg to ignore input timestamps, and force creation of new ones
input_flags="-fflags +igndts";
output_flags="-fflags +genpts";
# ffmpeg to leverage the multi-threading of the CPU, for aware libraries
use_threads="-threads 0";
# ffmpeg to strip the metadata from the input file, except chapter times
strip_meta="-map_metadata -1";
# ffmpeg to strip the metadata from the input file, including chapter times
strip_chapters="-map_chapters -1";
force_block=1;
force_stats=1;

function cache_settings {
  [[ $current_prefix ]] || return 0;
  local fields="${current_prefix}_fields";
  local field;
  local var;
  for field in ${!fields} ${control_fields}; do
    var="current_${field}";
    [[ ${!var} ]] && declare -g stack_${stack_num}_${field}="${!var}";
  done
  (( stack_num++ ));
  return 0;
}

function check {
  ! (( $1-1 ));
}

function clear_settings {
  local field;
  for field in ${!current_*} ${control_fields}; do
    unset ${field};
  done
  return 0;
}

function init_dir {
  [[ $1 ]] && {
    [[ -s fixvid.conf-minimal ]] || make_minimal
  } || {
    local section;
    [[ -s fixvid.conf ]] || for section in main video titles audio; do
      config="${section}_config";
      $config;
    done
  }
  rm -f fixvid.scan;
  if [[ -s "movie" ]]; then
    echo "";
    echo "*********************************" | tee -a "fixvid.scan";
    echo "    Reading movie:" | tee "fixvid.scan";
    echo "---------------------------------" | tee -a "fixvid.scan";
    probe_file "movie" | tee -a "fixvid.scan";
    echo "" | tee -a "fixvid.scan";
    echo "" | tee -a "fixvid.scan";
  fi
  local file_type;
  local filename;
  for file_type in $scan_extensions; do
    for filename in *.$file_type; do
      if [ -s "$filename" ]; then
        echo "";
        echo "*********************************" | tee -a "fixvid.scan";
        echo "    Reading $filename:" | tee -a "fixvid.scan";
        echo "---------------------------------" | tee -a "fixvid.scan";
        probe_file "$filename" | tee -a "fixvid.scan";
        echo "" | tee -a "fixvid.scan";
        echo "" | tee -a "fixvid.scan";
      fi
    done
  done
  return 0;
}

function launch {
  local launch_command="$1";
  local new_prefix="${launch_command%%_*}";
  local new_target=$2;
  local range_var="${new_prefix}_limit";
  (( 0 < $new_target )) && (( $new_target < ${!range_var} )) || return 0;
  cache_settings;
  clear_settings;
  load_settings $new_prefix $new_target;
  current_base="${work_files}-${current_prefix}-${current_label}${3:+-$3}";
  saved_base="$current_base";
  saved_title="$current_title";
  $launch_command "$new_target";
  recall_settings;
  return 0;
}

function load_limit {
  local load_prefix="$1";
  local load_var="${load_prefix}_key";
  local load_key="${!load_var}";
  local load_limit=1;
  local var="${load_prefix}_${load_key}_${load_limit}";
  while [[ ${!var} ]]; do
    ((load_limit++));
    var="${load_prefix}_${load_key}_${load_limit}";
  done;
  declare -g ${load_prefix}_limit=$load_limit;
  return 0;
}

function load_settings {
  clear_settings;
  current_prefix="$1";
  current_target="${2:-1}";
  [[ 0 == $2 ]] && current_target=1;
  local var="${current_prefix}_limit";
  current_limit=${!var};
  [[ $current_target -lt $current_limit ]] || return 0;
  local field_list="${current_prefix}_fields";
  local field;
  for field in ${!field_list}; do
    var="${current_prefix}_${field}_${current_target}";
    declare -g current_${field}="${!var}";
  done
  declare -g current_source="${current_source:-$main_source}";
  declare -g current_lang="${current_lang:-$main_lang}";
  declare -g current_label="${current_label:-${current_prefix}-${current_target}}";
  declare -g current_title="${current_title:-$main_title}"
  [[ 'audio' = $current_prefix ]] && load_audio_settings;
  return 0;
}

function probe_file {
  local check_file=$1;
  [[ -s "$check_file" ]] || return 0;
  ffprobe "$check_file" 2>&1 | \
    grep -A 2 -E '^\s*(Chapter|Duration|Stream)' | \
    grep -v '^--';
  return 0;
}

function process_group {
  [[ $1 ]] || return;
  cache_settings;
  load_settings "${1%%_*}" "${2:-0}";
  [[ 0 -eq ${2:-0} ]] && current_all=1 || unset current_all;
  current_process="$1";
  [[ $current_target -lt $current_limit ]] && current_continue=1 || \
    unset current_continue;
  while check $current_continue; do
    launch $current_process $current_target $3;
    (( current_target++ ));
    check $current_all && check $current_continue && \
    [[ $current_target -lt $current_limit ]] || \
      unset current_continue;
  done
  recall_settings;
  return 0;
}

function recall_settings {
  clear_settings;
  (( 0 < $stack_num )) || return 0;
  (( stack_num-- ));
  var="stack_${stack_num}_prefix";
  current_prefix="${!var}";
  fields="${current_prefix}_fields";
  for field in ${!fields} ${control_fields}; do
    var="stack_${stack_num}_${field}";
    [[ ${!var} ]] && declare -g current_${field}="${!var}"
  done
  return 0;
}

function shared_launch {
# Function to utilize multiple cores better
#
# Code from 'arnaldocan' https://stackoverflow.com/users/2615062 on
# StackOverflow. An answer to "How do you run multiple programs in
# parallel from a bash script?". See:
# https://stackoverflow.com/a/42098494/7412956
#
# All Stack Overflow contributions licensed under cc by-sa 3.0 with
# attribution required.

  local ident=$1;
  shift;
  local block=$1;
  shift;
  ! check $block || check $max_parallel || {
    echo "$ident is pending full access";
    wait;
  }
  local run_time="";
  local finish_time="";
  local finish_epoch="";
  local launch_time=$(date +"%T");
  local launch_epoch=$(date +"%s.%N");
  echo "Processing $ident ...";
 "$@" && {
   finish_epoch=$(date +"%s.%N");
   finish_time=$(date +"%T");
   run_time=$(echo "$finish_epoch - $launch_epoch" | bc -l);
   echo "... $ident complete ($launch_time - $finish_time) [$run_time sec]";
 } &
  local pid=$!;
  local my_pid=$$
  [[ 1 == $block ]] && \
    wait $pid;
  [[ 1 == $block ]]  || \
    [[ '-' == $block ]] || \
    [[ 0 == $block ]] || {
      declare -g ${block}_pid=$pid;
    }
  local parallels=$(ps -eo ppid | grep -w $my_pid | wc -w)
  parallels=$((parallels-1))
  if (( parallels >= max_parallel )); then
      wait -n
  fi
  return 0;
}

#  FFMPEG stream manipulation functions

function reset_ffmpeg_data {
  local var;
  for var in $ffmpeg_variables; do
    unset $var;
  done
  return 0;
}

function build_ffmpeg_audio_encode {
  local my_codec=${1:-ac3};
  local my_param="${my_codec}_encode";
  local my_encode="${!my_param}";
  local my_bitrate="${my_codec}_bitrate";
  local my_bits="${!my_bitrate}";
  local temp_title="$current_title";
  local temp_base="$current_base";
  current_title="${temp_title}${2:+ $2}";
  current_base="${temp_base}${3:+-$3}";
  codec_part="${my_encode:+-c:a $my_encode}${my_bits:+ -b:a $my_bits}";
  [[ ${4+zz} ]] || [[ ! $filter_graph ]] && filter_graph="$4";
  [[ ${5+yy} ]] || [[ ! $output_pad ]] && output_pad="$5";
  build_ffmpeg_stream;
  build_ffmpeg_output "${my_codec}" "$audio_only";
  build_ffmpeg_preamble "${current_base}.${my_codec}";
  build_ffmpeg_command;
  current_title="$temp_title";
  current_base="$temp_base";
  return 0;
}

function build_ffmpeg_command {
  [[ $ffmpeg_preamble ]] || build_ffmpeg_preamble "${current_base}.mkv";
  [[ $input_list ]] || [[ $ffmpeg_input ]] || build_ffmpeg_input;
  [[ $meta_filter ]] || build_meta_filter;
  ffmpeg_command="$ffmpeg_preamble \
    ${input_list:-$ffmpeg_input} \
    $meta_filter \
    $filter_graph \
    ${stream_list:-$ffmpeg_stream} \
    $ffmpeg_output";
  return 0;
}

function build_ffmpeg_input {
  ffmpeg_input="$input_flags -i '${1:-$current_source}'";
  return 0;
}

function build_ffmpeg_output {
  [[ $file_meta ]] || build_file_meta;
  ffmpeg_output="$file_meta $use_threads $output_flags $2 \
    ${current_base}${3:+-$3}.${1:-mkv}"
  return 0;
}

function build_ffmpeg_preamble {
  ffmpeg_preamble="FFREPORT=file='fixvid-$1.log':level=40 \
    ffmpeg -hide_banner -y -loglevel error";
  check $2 || \
  ! check $hide_stats && \
    ffmpeg_preamble+=" -stats";
  return 0;
}

function build_ffmpeg_stream {
  [[ $output_pad ]] ||
    output_pad="0:${current_stream:-0}";
  [[ $stream_meta ]] || build_stream_meta;
  ffmpeg_stream="-map $output_pad $codec_part $stream_meta";
  [[ $ffmpeg_output ]] && \
    ffmpeg_stream+=" $ffmpeg_output" && \
    unset ffmpeg_output;
  return 0;
}

function build_file_meta {
  local alt_title="$main_title${1:+ [$1]}";
  [[ ! $1 ]] && [[ $current_label ]] && \
    alt_title+=" $current_prefix (${current_label})";
  file_meta="-metadata 'creation_time=$timestamp' \
    -metadata 'lang=${current_lang:-$main_lang}' \
    -metadata 'title=${current_title:-$alt_title}'";
  return 0;
}

function build_meta_filter {
  meta_filter="$strip_meta -map_chapters ${1:--1}";
  return 0;
}

function build_stream_meta {
  local alt_title="$main_title${2:+ ($2)}";
  [[ ! $2 ]] && [[ $current_label ]] && \
    alt_title+=" $current_prefix (${current_label})";
  stream_meta="-metadata:s:${1:-0} 'lang=${current_lang:-$main_lang}' \
    -metadata:s:${1:-0} 'title=${current_title:-$alt_title}'";
  return 0;
}

function ffpeg_add_stream {
  local source_file;
  [[ "$1" ]] && source_file="$1" || return 0;
  local stream_prefix="${2:-video}";
  shift;
  shift;
  local var="${stream_prefix}_default";
  local extra_meta;
  check ${!var} && \
    extra_meta="-disposition:$stream_count -default" || {
      extra_meta="-disposition:$stream_count +default";
      declare -g $var=1;
    }
  while [[ "$1" ]]; do
    extra_meta="${extra_meta} -disposition:$stream_count $1";
    shift;
  done
  build_ffmpeg_input "$source_file";
  source_list+=" $ffmpeg_input";
  build_stream_meta $stream_count;
  stream_meta+=" $extra_meta";
  output_pad="${source_count}:0";
  codec_part="-c:${stream_count} copy";
  build_ffmpeg_stream;
  map_list+=" $ffmpeg_stream";
  (( source_count++ ));
  (( stream_count++ ));
  reset_ffmpeg_data;
  return 0;
}

function main_config {
tee 'fixvid.conf' << 'EOMAIN' >/dev/null

########################################################################
#                                                                      #
#  fixvid.conf: configuration settings for the creation of the files   #
#                                                                      #
#  This file is part of FixVid, a system to semi-automatically modify  #
#  and re-encode video files to create an acceptable version for a     #
#  standardized collection or library of videos.                       #
#                                                                      #
#  Copyright Â© 2018, 2019  Ronald Lamoreaux <code@chindraba.work>      #
#  - All Rights Reserved                                               #
#                                                                      #
#  FixVid is free software; you can redistribute it and/or             #
#  modify it under the terms of the GNU General Public License,        #
#  version 2 only, as published by the Free Software Foundation.       #
#                                                                      #
#  FixVid is distributed in the hope that it will be useful,           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of      #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       #
#  GNU General Public License for more details.                        #
#                                                                      #
#  You should have received a copy of the GNU General Public License   #
#  along with this program; if not, write to the                       #
#        Free Software Foundation, Inc.                                #
#        51 Franklin Street                                            #
#        Fifth Floor                                                   #
#        Boston, MA  02110-1301                                        #
#        USA.                                                          #
#                                                                      #
########################################################################

########################################################################
#                                                                      #
#                        Final Product Settings                        #
#                                                                      #
########################################################################

#  Set to make the system work "as-is" but not very informative

#  The name of the file which has most, if not all, of the streams to
#+ to be converted in the processing
main_source='movie';


#  Name of the video that is stored in the meta data of the files.
#+ To use a double quote in the title use triple-escape, \\\"
main_title="Name of the Movie";

#  Year the video was produced/released
main_year=2018;

#  The language for the video, and the default language for included
#+ audio and subtitle streams when not given individually.
main_lang="eng";

#  Name used as the prefix for work files, use shell-safe names
work_files="my_video";

#  Name used as the prefix for the final product files, stay shell-safe
final_files="The_Movie_Name";

#  The "time" when this was all collected and remuxed.
#+ Use the format YYYY-MM-DDTHH:MM:SS to place a custom timestamp in the
#+ created video file, and streams which support the timestamp.
#+ This not affect the timestamp on the files within the file system.
timestamp="$(date --utc +%Y-%m-%dT%H:%M:%SZ)";

########################################################################
#                                                                      #
#                       Process Control Settings                       #
#                                                                      #
########################################################################

#  How many parallel processes to run, when using parallelism
#+ Set to 1 to disable parallel processing, i.e. 1 at a time
max_parallel=4;

#  Flag to allow converting to the nVidia encoders
enable_nvidia=true;

#  Flag to not show the FFMPEG progress line during stream creation
#= hide_stats=1;

########################################################################
#                                                                      #
#                            Chapter Titles                            #
#                                                                      #
########################################################################

#  Chapter titles are a special case. Chapter information is embedded in
#+ the container rather than the stream(s). The process of creating the
#+ component files is designed to strip out all the meta data from the
#+ streams, and the chapter titles are "lost" in the process. So many of
#+ the videos encountered so far have had meaningless 'title' for the
#+ chapters. Either the chapter number, or the chapter start time, is
#+ the common 'title,' and loosing those is of no consequence.
#+ Attempting to preserve the title in the processing turns out to be
#+ more work than to just add them back into the final product, when
#+ they exist.

#  Name of the file that has useful chapter data. Leave commented if none
#= chapter_source='movie';

EOMAIN
}



function make_minimal {
tee 'fixvid.conf' << 'EOMINIMAL' >/dev/null

########################################################################
#                                                                      #
#  fixvid.conf: configuration settings for the creation of the files   #
#                                                                      #
#  This file is part of FixVid, a system to semi-automatically modify  #
#  and re-encode video files to create an acceptable version for a     #
#  standardized collection or library of videos.                       #
#                                                                      #
#  Copyright Â© 2018, 2019  Ronald Lamoreaux <code@chindraba.work>      #
#  - All Rights Reserved                                               #
#                                                                      #
#  FixVid is free software; you can redistribute it and/or             #
#  modify it under the terms of the GNU General Public License,        #
#  version 2 only, as published by the Free Software Foundation.       #
#                                                                      #
#  FixVid is distributed in the hope that it will be useful,           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of      #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       #
#  GNU General Public License for more details.                        #
#                                                                      #
#  You should have received a copy of the GNU General Public License   #
#  along with this program; if not, write to the                       #
#        Free Software Foundation, Inc.                                #
#        51 Franklin Street                                            #
#        Fifth Floor                                                   #
#        Boston, MA  02110-1301                                        #
#        USA.                                                          #
#                                                                      #
########################################################################

main_title="Name of the Movie";
main_year=2018;
final_files="The_Movie_Name";
main_lang="eng";
work_files="my_video";
main_source='movie';
timestamp="$(date --utc +%Y-%m-%dT%H:%M:%SZ)";
#= chapter_source='movie';

max_parallel=4;
enable_nvidia=true;
#= hide_stats=1;

video_stream_1=0;
video_label_1="1080p";
video_codec_1='HEVC';
#= video_codec_label_1='HEVC';

video_params_1='-b:v 2400K -maxrate:v 2800K -preset slow -2pass 1 -rc vbr_hq -rc-lookahead 32 -level 5.1 -profile:v main -tier high';
#+ video_params_1='-b:v 2400K -maxrate:v 2800K -preset slow -2pass 1 -rc vbr_hq -rc-lookahead 32 -level 5.1 -profile:v main10 -tier high';

#= video_equalizer_1='eq=contrast=1.12:brightness=0.18';
#= video_adjust_1='scale=1920x796,setsar=1/1';
#= video_adjust_1='crop=1920:754,scale=1280x504,setsar=1/1';
#= video_complex_1=1;
video_save_1=1;

#= titles_source_1='movie';
titles_stream_1=;
#= titles_label_1='titles';
titles_lang_1='eng';
titles_title_1='Standard subtitles';
titles_type_1='dvd_subtitle';
titles_include_1=1;
#= titles_SDH_1=1;
#= titles_save_1=1;

#= audio_source_1='movie';
audio_stream_1=1;
audio_label_1='sound';
audio_title_1='';
audio_lang_1='eng';
audio_channels_1='5.1(side)';

audio_include_enhanced_1=1;
#= audio_include_original_1=1;
#= audio_include_stereo_1=1;
#= audio_include_channels_1=1;
#= audio_include_dts_1=1;
#= audio_include_ac3_1=1;
#= audio_include_aac_1=1;

#= audio_save_enhanced_1=1;
audio_save_original_1=1;
#= audio_save_stereo_1=1;
#= audio_save_channels_1=1;
#= audio_save_dts_1=1;
#= audio_save_ac3_1=1;
#= audio_save_aac_1=1;

#= dyna_stereo='dynaudnorm=f=66:g=17:p=0.95:m=50:s=20';
#= dyna_center='dynaudnorm=f=100:g=13:p=0.97:m=15:s=20';
#= dyna_origin='dynaudnorm=f=250:g=23:p=0.89:m=15:s=20';
#= dyna_extras='dynaudnorm=f=500:g=31:p=0.80:m=15:s=20';
#= dyna_others='dynaudnorm=f=300:g=23:p=0.95:m=30:s=20';

EOMINIMAL
}
