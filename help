########################################################################
#                                                                      #
#  help: functions and text to display help and usage information      #
#                                                                      #
#  This file is part of FixVid, a system to semi-automatically modify  #
#  and re-encode video files to create an acceptable version for a     #
#  standardized collection or library of videos.                       #
#                                                                      #
#  Copyright Â© 2018, 2019  Chindraba (Ronald Lamoreaux)                #
#                          <fixvid@chindraba.work>                     #
#  - All Rights Reserved                                               #
#                                                                      #
#  FixVid is free software; you can redistribute it and/or             #
#  modify it under the terms of the GNU General Public License,        #
#  version 2 only, as published by the Free Software Foundation.       #
#                                                                      #
#  FixVid is distributed in the hope that it will be useful,           #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of      #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       #
#  GNU General Public License for more details.                        #
#                                                                      #
#  You should have received a copy of the GNU General Public License   #
#  along with this program; if not, write to the                       #
#        Free Software Foundation, Inc.                                #
#        51 Franklin Street                                            #
#        Fifth Floor                                                   #
#        Boston, MA  02110-1301                                        #
#        USA.                                                          #
#                                                                      #
########################################################################

declare -A usage;
usage['[a] audio']='[<target>] Create all selected versions of the [<target>] audio stream(s)';
usage['[b] build']='[<target>] Execute the "audio" "titles" and "remux" commands in sequence';
usage['    channels']='[<target>] Low-level command to extract the [<target>] surround sound channels';
usage['[d] dts']='[<target>] Create the DTS encoded [<target>] audio stream(s)';
usage['[f] final']='Copy all created and properly tagged files to the final directory';
usage['[g] go']='[<target>] Make and copy all the streams and files indicated in the config file';
usage['[h] help']='[<command|topic>] Display general help, or help on the given command or topic';
usage['[i] init']='[fast] Scan source candidates, create the fixvid.conf and fixvid.scan files';
usage['[m] mix | remix']='[<target>] Create the [<target>] surround sound audio stream(s)';
usage['    normalize']='[<target>] Low-level command to normalize the [<target>] surround sound channels';
usage['[p] probe']='<file_name> Show filtered results for the streams in the file';
usage['[r] remux']='[<target>] Collect the created streams into a new video file using the given video stream';
usage['[s] stereo']='[<target>] Create the [<target>] stereo audio stream(s)';
usage['[t] titles']='[<target>] Extract/process the [<target>] subtitle stream(s)';
usage['    version']='Display the version number and exit';
usage['[v] video']='[<target>] Create the bare [<target>] video stream(s)';

function help {
  [[ $2 ]] && {
    cmd_name="$2";
    while [[ $cmd_name =~ ^- ]]; do
    cmd_name=${cmd_name#-};
    done
    cmd_name="${cmd_name,,}";
    help_cmd="${cmd_name}_help";
    ( declare -Ff $help_cmd > /dev/null ) || {
      echo "There is no advanced help availabe for $1 $cmd_name.";
      return 0;
    }
    $help_cmd $1;
    see_also $1 $cmd_name;
  } || {
    help_main $1;
  }
}

function help_main {
  cat <<HELP_MAIN

Usage: $1 <command> [arg [arg]]

Processes files in the current directory, according to the information
in the fixvid.conf file as steps in creating a new, remuxed, video file
from the source file(s) in the directory.

Available commands are:

HELP_MAIN
  mapfile -d '' commands < <(printf '%s\0' "${!usage[@]}" | sort -z);
  for cmd in "${commands[@]}"; do
    printf '  %-15s %s\n' "$cmd" "${usage[$cmd]}";
  done
  cat <<EXTRA_HELP

Addtional topics available in help are:
   target:     How the <target> is validated and used
   dynaudnorm: Common elements of the dynaudnorm audio filter
   filters:    Links to FFMPEG documentation for common video filters
   force:      (Re-)create streams, overwriting existing files

Use $1 help <command|topic> for more information on each command or topic.

EXTRA_HELP
}

function see_also {
  echo "See also:"
  local topic;
  for topic in target dynaudnorm filters force; do
    [[ $2 == $topic ]] ||
      echo "    $1 help $topic";
  done
}

function audio_help {
  cat <<HELP_AUDIO

    a [<target>]
    audio [<target>]
        A one-shot command to create all the audio files associated with
        the <target> audio group. Combines the commands stereo, mix, and
        dts into a single command. In all cases the <force> parameter is
        ignored. May process one audio group, or all audio groups at once.
        For more information on multiple groups, see: $1 help target.

HELP_AUDIO
}

function build_help {
  cat <<HELP_BUILD

    b [<target>]
    build [<target>]
        A one-shot command to create all the files indicated in the
        fixvid.conf file for the <target> video group as well as all the
        files indicated for all audio groups and all subtitle groups. It
        is the equivalent of using the titles, audio, and remux commands
        in order. In all cases the <force> parameter is ignored. May
        process one video group, or all video groups at once. For more
        information on multiple groups, see: $1 help target.

HELP_BUILD
}

function channels_help {
  cat <<HELP_CHANNELS

    channels [<target> [<force>]]
        Create a separate WAV file for each channel of a surround sound
        stream. This is a low-level command and is normally called as
        needed by the mix command. May process one audio group, or all
        audio groups at once. For more information on multiple groups,
        see: $1 help target.

HELP_CHANNELS
}

function dts_help {
  cat <<HELP_DTS

    dts [<target> [<force>]]
        Create DTS formatted surround sound files from the AC3 or AAC
        files previously created by the mix command. Will call the mix
        command if the needed input files are missing.  May process one
        audio group, or all audio groups at once. For more information
        on multiple groups, see: $1 help target.

HELP_DTS
}

function final_help {
  cat <<HELP_FINAL

    f
    final
    finalize
        Create a properly named subdirectory in the working directory
        and copy (link) all created files which are marked as _save_
        in the fixvid.conf file into that directory using the
        final_files setting to create a standard base name, and uses a
        consistent name for all file types. Will not create missing
        files, failing silently for each missing file. Ignores both the
        <target> and <force> parameters as irrelavent, since all
        existing and qualifying files are linked and none are created.

HELP_FINAL
}

function finalize_help {
  final_help;
}

function go_help {
  cat <<HELP_GO

    g [<target>]
    go [<target>]
        A one-shot command to make all audio and subtitle streams, remux
        the <target> video and copy the proper files into the finalized
        subdirectory. Equivalent to running the build and finalize
        commands in sequence. Will process all subtitle groups and all
        audio groups, but only the <target> video group. May process one
        video group, or all video groups at once. For more information
        on multiple groups, see: $1 help target.

HELP_GO
}

function init_help {
  cat <<HELP_INIT

    init [fast]
        Create the generic fixvid.conf file in the directory and scan
        for all "mp4", "mkv", "avi", "aac", "ac3", "wav", and  "mp3"
        files in the current directory and provide a filtered output
        from ffprobe for each. The scan results are displayed, and
        recorded in the fixvid.scan file. Included in the scan is a file
        named "movie" without any file type or extension. This file may
        be any of FFMPEG supported type. This file, if present, will be
        the first one scanned, and listed at the top of the scan report.

        If the [fast] parameter is non-blank, a minimalistic version of
        the fixvid.conf file will be created. There are no comments to
        explain the values, and only one settings group for audio,
        video and subtitles streams is included. More groups can still
        be added, but it will need to be completely typed by the user.

HELP_INIT
}

function mix_help {
  cat <<HELP_MIX

    m [<target> [<force>]]
    mix [<target> [<force>]]
    remix [<target> [<force>]]
        Process the surround sound stream <target> according to the
        settings and requirements in the fixvid.conf file. Any
        combination of the volume levels (original and normalized) and
        the codecs (AC3 and AAC) are possible. Any combination that is
        marked as _include_, _save_, or _make_ will be created. When the
        audio group indicated by <target> is given as a 2-channel source,
        mix will silently fail. If any normalized versions are required,
        the original source will be split into individual WAV files,
        normalized versions of each will also be in WAV files, and the
        results will be remixed into a file, or files, with the required
        codec(s). Will automatically call the low-level commands to
        create the supporting files if needed. Does not create the DTS
        encoded files, which are created by the dts [<target>] command.
        May process one audio group, or all audio groups at once. For
        more information on multiple groups, see: $1 help target.

HELP_MIX
}

function normalize_help {
  cat <<HELP_NORMALIZE

    normalize [<target> [<force>]]
        Create normalized versions of each of the separate channels made
        by the channels command. Will call the channels command if any
        of the original files are missing. Will only make normalized
        versions for channels which do not have one made previously.
        May process one audio group, or all audio groups at once. For
        more information on multiple groups, see: $1 help target.

HELP_NORMALIZE
}

function probe_help {
  cat <<HELP_PROBE

    probe <file>
        Run ffprobe on the listed file and filter the results, showing
        the lines pertinent to the file's duration, chapter list, and
        each stream located in the file.

HELP_PROBE
}

function remix_help {
  mix_help $1;
}

function rebuild_help {
  remux_help;
}

function remux_help {
  cat <<HELP_REMUX

    r [<target>]
    remux [<target>]
    rebuild [<target>]
        Create video files from the files and streams identified in the
        fixvid.conf file. Will call the appropriate commands to build
        any of the missing streams. Can be used as a one-shot command to
        completely run through all the needed commands to create each of
        the streams identified in the fixvid.conf file as being included
        in the final video file. If used as a one-shot, it is possible
        that some of the streams which the fixvid.config file directs to
        be made, but not included in the final file, will not be created.
        This command will only require the commands to create the
        versions of the streams which are flagged as being included. The
        command may create other streams as part of the process, but
        there is no certainty that all the streams flagged to be made
        will be created. This command, and any which it calls, will
        ignore the <force> parameter.  May process one video group, or
        all video groups at once. For more information on multiple
        groups, see: $1 help target.

HELP_REMUX
}

function stereo_help {
  cat <<HELP_STEREO

    stereo [<target> [<force>]]
        Extract the stereo sound track from the file and stream
        identified in the fixvid.conf file as the stereo source. Applies
        the enhancements to the stereo sound track and creates an AAC
        and/or an AC3 file of the original and/or the enhanced tracks.
        May process one audio group, or all audio groups at once. For
        more information on multiple groups, see: $1 help target.

HELP_STEREO
}

function subtitles_help {
  titles_help;
}

function titles_help {
  cat <<HELP_TITLES

    t [<target> [<force>]]
    titles [<target> [<force>]]
    subtitles [<target> [<force>]]
        Create subtitle files from the files and streams identified in
        the fixvid.conf file. May process one subtitle group, or all
        subtitle groups at once. For more information on multiple
        groups, see: $1 help target.


HELP_TITLES
}

function video_help {
  cat <<HELP_VIDEO

    v [<target> [<force>]]
    video [<target> [<force>]]
        Extract the video from the file and stream identified in the
        fixvid.conf file. May process one video group, or all video
        groups at once. For more information on multiple groups,
        see: $1 help target.

HELP_VIDEO

}


function dynaudnorm_help {
  cat <<DYNAUDNORM

dynaudnorm is the dynamic audio normalization filter in FFMPEG. It has
the following parameters, among others, available

   f:  frame-size(ms)[10-8000,500]: size of each frame for gain
       calculations
   g:  Gaussian filter window size(frames)[3-301(odd),31]: the "window"
       over which gain is normalized
   p:  peak target(%of FS)[.01-.99,.95]: the target max volume of
       normalization.
   m:  max-gain[1-100,10]: globally applied limit to gain applied to any
       segment.
   r:  RMS[0.0(disabled)-1.0]: Use RMS calculations, rather than "peak"
       for gain factors
   s:  compression factor[0.0(disabled)-30.0]: lower is more dynamic
       compression, 3 seems a hard no-distortion floor.

   The parameters are given in a colon ':' separated list of key=value
   pairs. A global maximum gain of 25 with a target peak of 85% of full
   scale using a window of 43 frames of 750ms each would be given as:
       'dynaudnorm=m=25:p=.85:g=43:f=750'

   Full documentation for dynaudnorm can be found on the FFMPEG website:
        https://ffmpeg.org/ffmpeg-filters.html#dynaudnorm

DYNAUDNORM
}

function filter_help {
  filters_help;
}

function filters_help {
  cat <<'HELP_FILTER'

The FFMPEG documentation for video filters can be found at:
    https://ffmpeg.org/ffmpeg-filters.html#Video-Filters

For documentation on some specific, and likely, video filters go to:
    scale:  https://ffmpeg.org/ffmpeg-filters.html#scale-1
     crop:  https://ffmpeg.org/ffmpeg-filters.html#crop
   setsar:  https://ffmpeg.org/ffmpeg-filters.html#setdar_002c-setsar
       eq:  https://ffmpeg.org/ffmpeg-filters.html#eq

HELP_FILTER
}

function force_help {
  cat <<FORCE_HELP

    <force>
        The <force> parameter is available on some of the commands
        (channels, dts, mix, normalize, stereo, titles, and video)
        where the command will ignore existing, previously created,
        files and make every possible combination of volume level and
        codec which can be made with that command.

        The <force> parameter is not available on the commands which
        perform multiple commands (audio, build, go, and remux) or the
        finalize command, which always overwrites the files anyway.

        With the titles and video commands, which only create one
        version of the file anyway, it only has the effect of causing
        the command to overwrite any previously created file.

FORCE_HELP
}

function target_help {
  cat <<TARGET_HELP

    <target>
        Many of the commands can make multiple versions of the streams
        if they are listed in the config file. Each version has its own
        group of settings. All audio settings are in audio_<param>_#,
        subtitles settings are in titles_<param>_# and video settings
        are in video_<param>_#. For subtitles and audio streams the
        _stream_# parameter is used to determine if that group of
        settings is to be used, while for video streams the _codec_#
        parameter is used to indicate an applicable group of settings.
        Each type of stream uses its own sequence of numbers, all begin
        with 1, and the list must be sequential, with no gaps. If group
        2 is not enabled, any other groups, from 3 and above, will not
        be used, even if they are defined.

        Commands with the optional argument of [<target>] accept a
        number for the group of settings to process. If the number is a
        valid choice, as determined above, then only that group will be
        processed, while all others will be ignored. If the number is
        not supplied, or is zero, all groups will be processed in one
        run of the command. If the number supplied is not in the range
        of valid numbers, the command will terminate without processing
        any stream.

        As the standard for video files is to only have one primary
        stream for the video, with the possibility of multiple streams
        for the audio and subtitles, each group of settings for video
        streams also indicates a version of the final video file(s) to
        create. Aside from each having one version of the video, all the
        final video files will have the same set of audio and subtitles.

TARGET_HELP
}

function target_num_help {
  target_help
}
